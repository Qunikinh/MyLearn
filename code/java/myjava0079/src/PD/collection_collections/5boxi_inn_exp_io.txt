上课顺序：
包装类：BoxingClass，WorpClassDemo
内部类：AnnInnerClass,InnerClassDemo ,StaticInnerClassDemo,LocalInnerDemo
exp:
io:OutputStreamWriterDemo,InputStreamReaderDemo,PrintWriterDemo,BufferedReaderDemo,StreamDemo,OutputStreamDemo1
       学生练习：实验7，书上第8章例题P189-197:例8-1，例8-3，例8-4，例8-5，例8-6，，P197案例：多种流的实现
1 java中的包装类
 1) 包装类可以把基本类型包装为对象类型
 2) 有八种包装类
     int  Integer
     long Long
     byte Byte
     short Short
     float Float
     double Double
     boolean Boolean
     char Character
  3) 包装类提供了对应数据类型的工具方法
    Integer.toHexString()
    Integer.toString(int)
    Integer.toBinaryString()
    Integer.parseInt(String)
    "3f"->int
    Integer.parseInt(String, int)
    
    "2.718" -> 2.718 
    Double.parseDouble(String str);
    
自动包装(auto boxing / unboxing)(java5 以后的):
  Integer i = 2;// i=new Integer(2);
  Object o = 3.5;
  System.out.println(o instanceof Double); //true
  int a = i+1;// a = i.intValue() + 1;
  
注意： 
  1) 包装类是final的类
  2) 包装类对象是不变的, 与字符串类似(不变模式)
    Integer a = 1;
    Integer b = 2;
    a = a+b;  //a = new Integer(a.intValue() + b.intValue())
 3) 包装类覆盖了 toString, equals, hashCode, compareTo


2 内部类:用内部类是因为内部类与所在外部类有一定的关系，往往只有该外部类调用此内部类,
所以没有必要专门用一个Java文件存放这个类。定义在类的内部的类，根据位置分为4类:  
  1) 匿名内部类，匿名类：非常常见，可以写在任何地方,就像一般的语句。 语法更象是创建对象：
    	Date d = new Date(){};
    匿名类是对原类的一个继承，同时创建了实例，{}就是继承以后的类体。类体中可使用所有类的语法。
    匿名类不能写构造器；
    匿名类可以从抽象类或者接口继承，必须提供抽象方法的实现； 
    匿名内部类可以访问外部类的局部变量(即方法内的变量)，但是变量必须是final的。
        为什么：https://www.cnblogs.com/DarrenChan/p/5738957.html
        （1） 内部类里面使用外部类的局部变量时，其实就是内部类的对象在使用它，内部类对象生命周期中都可能调用它，而内部类试图访问外部方法中的局部变量时，外部方法
    的局部变量很可能已经不存在了，那么就得延续其生命，拷贝到内部类中，而拷贝会带来不一致性，从而需要使用final声明保证一致性。说白了，内部类会自动拷贝外部变量的引用，
    为了避免： 1）外部方法修改引用，而导致内部类得到的引用值不一致 2）内部类修改引用，而导致外部方法的参数值在修改前和修改后不一致。于是就用 final 来让该引用不可改变。
        （2）内部类通常都含有回调，引用那个匿名内部类的函数执行完了就没了，所以内部类中引用外面的局部变量需要是final的，这样在回调的时候才能找到那个变量，而如果是外围类的
    成员变量就不需要是final的，因为内部类本身都会含有一个外围类的引用（外围类.this），所以回调的时候一定可以访问到。 
  2)成员内部类: 声明在类体中，不使用static，具有类的成员特征， 也就是，必须有类的实例才能创建内部类实例。
     内部类实例可以访问共享外部类的成员变量。
     很常用。 如：链表的节点就可以定义为内部类。 

  3)静态内部类：使用static修饰，声明在类体中。
    静态内部类中可以访问外部类的静态成员。
    静态,static,是用来修饰类的内部成员的，比如:静态方法、静态成员变量、静态常量，它唯一的作用就是随着类的加载（而不是随着对象的产生）而产生，可以用类名+静态成员名直接获得。
    静态内部类，可以直接被用外部类名+内部类名获得。 

  4)局部内部类：声明在方法中的类，作用域类似于局部变量。    
    局部内部类中不可定义静态变量，可以访问外部类的局部变量(即方法内的变量)，但是变量必须是final的。 
    很少用。

  5)任何内部类都编译成独立的class文件

  6)最大的作用：封装！封装内部概念 

  7)Java API 中，集合的迭代器实现、链表节点类型、散列表的散列桶(链表)、 二叉树的节点类型等，
   都是使用内部类实现!

3 异常(Exception)
 1) 异常:方法的意外结果
     如: nextLine() nextInt()

 2) Error和Exception的分类层次
  Throwable 可抛出的, 是错误的根, 包含异常类的实现代码
    |--Error 是系统不可恢复的错误，由JVM发生
    |   |--OutOfMemoryError 堆内存溢出
    |   |--StackOverflowError 栈内存溢出
    |--Exception 程序可以检查处理的异常,常见的异常继承根
        |--java.text.ParseException format解析对象时候发生
        |  如：Date d = dateformat.parse("2010-5-5");
        |--RuntimeException 非检查异常，Javac忽略对
             |      这类异常的语法检查，如：异常抛出，异常处理等。
             |--IllegalArgumentException  
             |--NullPointerException  *
             |--ArrayIndexOutOfBoundsException * 
             |--ClassCastException *
             |--NumberFormatException * Integer.parseInt(S) 

 3) 异常的处理：异常的处理与具体业务逻辑有关， 需要提供合理的处理
   A 使用try catch finally 捕获
   B 声明抛出异常 throw new NameExitsException  
   C try catch finally：
     try 是尝试运程代码块，如果有异常会被随后的catch捕获，异常发生以后代码执行catch 代码块。可以写多个catch处理一系列异常，但是要注意异常的大小关系，大类型的放到后面处理。
     catch 代码块是异常处理代码。 finally 代码块，不管是否出现异常，总会执行的代码块。经常用来处理现场的清理，比如：可靠的数据库连接关闭。
 
 4) 异常的分类
   A 检查异常  	 异常检查规则:a)一个方法如果抛出了异常，这个方法就必须声明异常的抛出。 b)调用抛出异常的方法，必须处理异常。
   B 非检查异常  Javac忽略对RuntimeException 的检查, 包括子类型。
 
 5) 异常的处理原则 与注意
    原则：A 能够底层处理的尽量处理，但是如果不能处理，必须抛出到 调用者（方法）。
          B 建议在捕获到异常时候使用e.printStackTrace()，打印到 控制台，输出内容是：出现异常时候的方法调用堆栈。
    注意: A 不应该简单的抛弃。  B 不建议粗粒度处理异常 如:catch(Exception e)。
    处理方式，依赖于具体业务逻辑，灵活处理。
     
 6) 异常的实例:
     User reg( String pwd, String email) throws UserExistException;
     User login(String email, String pwd) throws NameOrPwdException;
     
 7)自定义异常类一般继承于Exception， 软件中会大量使用自定义异常，一般从Exception继承。

 8)异常类命名要有实际意义, 一般都手工继承父类的构造器。 
 
 9）异常简化小结：Java通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在Java中，每
个异常都是一个对象，它是Throwable类或其它子类的实例。当一个方法出现异常后便抛出一个异常对象，该
对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并进行处理。Java的异常处理是通过5个关
键词来实现的：try、catch、throw、throws和finally。一般情况下是用try来执行一段程序，如果出现异常，系统
会抛出（throws）一个异常，这时候你可以通过它的类型来捕捉（catch）它，或最后（finally）由缺省处理器
来处理。用try来指定一块预防所有异常的程序。紧跟在try程序后面，应包含一个catch子句来指定你想要捕捉
的异常的类型。 throw语句用来明确地抛出一个异常。 throws用来标明一个成员函数可能抛出的各种异常。
可以在一个成员函数调用的外面写一个try语句，在这个成员函数内部写另一个try语句保护其他代码。每当遇
到一个try语句，异常的框架就放到堆栈上面，直到所有的try语句都完成。

10）http://www.cnblogs.com/dolphin0520/p/3769804.html

11）通过异常处理，我们可以对用户在程序中的非法输入进行控制和提示，以防程序崩溃。 
    从进程的视角，硬件中断相当于可恢复异常，虽然中断一般与程序流本身无关。 
    从子程序编程者的视角，异常是很有用的一种机制，用于通知外界该子程序不能正常执行。如，输入的数据无效，例如除数是0，或所需资源不可用，例如文件丢失。如果系统没有异常机制，则编程者需要用返回值来标示发生了哪些错误。



1 io有四个问题要解决：
1）构造一个字节流对象连接一个文件（内存-磁盘），接口Inputstream/Outputstream,
   FileInputStream/FileOutputStream,方法read/write
2）字节流-字符流，类InputStreamReader/OutputStreamWriter，方法 read/write；
3）缓冲区，buffered，块读/块写，BufferedInputStream/BufferedOutputStreamm,方法read/write
4）1个字符-1行字符（字符串，行读行写），BuffererReader/PrintWriter,提供了方法：readline/println

2 InputStream 
	|-- 节点流 (流开始的地方, 流的源泉)
	|    |-- FileInputStream  
	|    |-- ByteArrayInputStrem
	|-- 过滤流
	|    |-- BufferedInputStream 
	|    |-- ObjectInputStream
	|    |-- ZipInputStream
	|    |-- InputStreamReader
	
OutputStream
	|-- 节点流 (流结束的地方, 流的目的)
	|    |-- FileOutputStream
	|    |-- ByteArrayOutputStream
	|-- 过滤流
	|    |-- BufferedOutputStream
	|    |-- ObjectOutputStream
	|    |-- ZipOutputStream
	|    |-- OutputStreamWriter

文本的处理(byte<->char, 编码转换)
Reader
  |-- InputStreamReader 核心 处理(byte-解码->char)
  |   如:  GBK(byte)-->Java Unicode(char)
  |-- FileReader=InputStreamReader+FileInputStream
  |-- BufferedReader 提供了readLine()

Writer
  |-- OutputStreamWriter 核心 处理(char-编码->byte) 
  |   如:  Java Unicode(char) --> GBK(byte)
  |-- FileWriter=OutputStreamWriter+FileOutputStream
  |-- PrintWriter 非常常用, 有println 方法
  
 3 3 理解缓冲区:http://zhidao.baidu.com/link?url=Y1HIWbo0_NwAHBI3xQXCXYiP9OnltIp50lHL5kDfJm9KPksfy3Qu6rwVFjlxpIFOuy-pYEw2jZ3EZ70HGy3HJvgSZz4iLoWwH1q9NlGxpKO
 BufferedInputStream的实现中有一个用于存储数据的内部缓冲区数组：
 protected volatile byte[] buf。 这个缓冲区数组的作用在于对源进行数据块访问，而不
 是 一字节一字节的访问，也就是进行一次I/O将一块数据存到缓冲区中，再从缓冲区中read，
 当缓 冲区为空时再重新读新的数据块。这个数组是jdk里的BufferedInputStream类的实现里
 的，是 作为BufferedInputStream的成员变量的，不是指read方法参数里的byte[]数组，
 read方法参 数的byte数组只是read到的字节存到哪，完全不是一个概念。至于效率，在理
 解了缓冲区的概念后就好理解了。FileInputStream的read方法由于没有缓冲区的支持，只
 能每次read都对源进行I/O，频繁I/O是比较麻烦的，所以效率肯定没有
 BufferedInputStream的read方法快。


4 IO流 (InputStream, OutputStream)：
  流：是一种数据操作模型: 把任何数据都作为Byte的有序集合看待 逐一处理的方式方式叫做流
 InputStream, OutputStream 都是抽象类
 InputStream 抽象了应用程序读取数据的方式
 OutputStream 抽象了应用程序写出数据的方式
 EOF = End of File = -1
 输入流基本方法:
 int b = in.read() 读取一个byte 无符号填充到int低八位,-1是EOF
 in.read(byte[] buf) 读取数据填充到buf中
 in.read(byte[] buf, int start, int size)读取数据填充到buf中
 in.skip(long n)
 in.close();
 输出流的基本方法: 
 out.write(int b) 写出一个byte到流 b的低八位写出
 out.write(byte[] buf) 将缓冲区buf都写入到流
 out.write(byte[] buf, int start, int size)将buf的一部分 写到流中.
 out.flush() 清理缓冲
 out.close();
     
5 文件输入流 FileInputStream 继承于InputStream
  FileInputStream具体实现了在文件上读取数据，读出的是byte数据
  
  任务1: 读取文件并且按照HEX输出, 每10 byte为一行
  任务2: 读取文件内容为一个byte数组
  任务3: 将byte数组内容按照HEX输出, 每10 byte为一行
  任务4: 将byte数组转换为hex字符串
  
6 文件输出流 FileOutputStream 继承于OutputStream
  FileOutputStream 实现了向文件中写出byte数据的方法
  
  任务: A 在demo文件夹中创建out.dat
       B 打开这个文件
       C 写入 'A' 和 'B'
       D 写入整数 255 占用4个byte
       E 写入GBK 编码的 '中', d6d0

9 文件的复制实现与优化： 
               InputStream        OutputStream
 文件(Byte 序列) --输入流--> 应用程序 --输出流--> 文件(Byte)
                   in.read()   out.write() 

10 流的功能扩展:(流的设计模式: 装饰器模式, 灵活组合扩展功能(积木))
  InputStream / OutputStream  Byte流(字节流)

  基本类型的IO(int long ) DataOutputStream/DataInputStream
  文本类型(编码) IO
    Writer / Reader 字符流, 每次处理一个字符
    InputStreamReader / OutputStreamWriter
    BufferedReader(readLine()) / PrintWriter(println())
    Scanner(Java 5)
    Console(Java 6)
    
    Scanner s = new Scanner(System.in);
    Random random = new Random();
         
10.1 DataOutputStream 对基本的输出流功能扩展,
 提供了基本数据类型的输出方法, 也就是基本类型序列化方法
  writeInt() writeDouble() 
  是过滤器 
             DOS       FOS
  应用程序 -- 过滤器 -->输出流--> 文件(Byte)
      writeInt(i)    write()   ff ff ff fd

10.2 DataInputStream 对基本的输入流(InputStream)功能扩展,
  提供基本类型的输入方法, 就是基本类型的反序列化 
  DataInputStream 是过滤器, 只是功能扩展, 不能直接读取文件
  readInt() readDouble() ...
 
                  FIS      DIS    dis.readInt()
 文件(Byte 序列)--输入流--> 过滤器-->  应用程序 
 [7f ff ff ff]   read()   readInt() 0x7fffffff            

10.3 BufferedInputStream 和 BufferedOutputStream
  一般打开(in/out)文件, 都加上缓冲流, 实现块读写，提高IO性能
             DOS      BOS     FOS
  应用程序 -- 过滤器-->过滤器-->输出流--> 文件(Byte)
      writeInt(i)    write() write(byte[]) ff ff ff fd
                      byte[]
  FileInputStream fis = new FileInputStream(file);
  BufferedInputStream bis = new BufferedInputStream(fis);
  DataInputStream in = new DataInputStream(bis);

  FileOutputStream fos = new FileOutputStream(file);
  BufferedOutputStream bos = new BufferedOutputStream(fos);
  DataOutputStream out = new DataOutputStream(bos);


10.4 字符串的序列化(文字的编码方案)
 1) Java中的String对象就是一个unicode编码的字符串，Stirng字符串本质上是char[],
 将char[]转换成byte序列就是字符串的编码,就是字符串的序列化。 char是16位无符号整数,
 值是unicode编码。
    str.getBytes("GBK") 
    new String(byte[], "gbk")
    byte 流
   Java中，unicode编码方案：
 2) utf-16be 编码方案, 将16位char从中间切开为2个byte
   utf-16be 是 将unicode char[] 序列化为byte[] 的编码方案 
  能够支持65535 个字符编码, 英文浪费空间
   char[] = ['A','B','中'] 
   utf16be = [00, 41, 00, 42, 4e, 2d]
  
 3) UTF-8 编码方案采用变长编码 1~N方案, 其中英文1个byte, 中文3个byte 
  char[] = ['A','B','中'] 
  utf8 = [41 42 e4 b8 ad]
  
  utf-8是将unicode 编码为 byte 序列的方案
    unicode '中':  4e2d = 0100111000101101 
    utf-8   ’中':  e4 b8 ad = 11100100 10111000 10101101
                              1110XXXX 10XXXXXX 10XXXXXX
        以0为开头的是 英文!(0~127)
   110 表示连续2字节表示一个字符
   1110 表示连续3字节表示一个字符
   11110 表示连续4字节表示一个字符
        每个数据字节以 10开头
             
 4) GBK 中国国标,支持20000+ 中日韩英, 英文1Byte编码, 中文2Byte编码，
 与unicode不兼容, 需要码表转换(散列表查询)
 char[] = ['A','B','中']   //4e2d 
 GBK(GB2312): {41,42,d6,d0},
 
 5） 谈谈对Java中Unicode、编码的理解
   http://blog.csdn.net/soleghost/article/details/959832
       我们经常会遇到编码问题。Java号称国际化的语言，是因为它的class文件采用UTF-8，而JVM
 运行时使用UTF-16（至于为什么JVM中要采用UTF-16，我没看过 相关的资料，但我猜可能是因
 为JAVA里面一个字符(char)就是16位的，而UTF-16正是双字节编码），都是unicode的编码。
   unicode 的目标就是能支持世界上所有的字符集，也就是说几乎所有的字符集包含的字符在
unicode中都有对应的编码。在unicode中，字符与代码的映射关 系就是unicode字符集，称
为UCS(Unicode Character Set)，每个unicode字符编码称为code point（代码点？）。
UTF-8和UTF-16是不同的UCS编码方法，UTF就是UCS Transformation Format。
       在Java 中，String的getBytes()方法就是对特定的字符串(unicode)按照给定的字符集进行
       编码（encode），new String()则可以按照某个字符集将字节流转换回unicode（decode）。
Java里面的每一个String都是unicode编码。
      再来看页面，如果不做特殊处理，Form的提交就按照页面的ContentType设置中的字符集进行
编码转换，发送到后台，后台必须利用req.setCharacterEncoding来指定参数的编码格式(不同
的应用服务器应有不同的指定方式)，才能正确解码。
  Java 里面的encode和decode都是相对于unicode而言的，encode的意思是将
char[] --> XXX Encoding byte[]，decode就是由XXX Encoding byte[] --> char[]。平常
当我们说“将GBK编码转换为UTF-8编码”的时候，实际的意思就是：
GBK Encoding byte[] --> UTF-8 Encoding byte[]，这种转换只有在需要用byte[]传输数据
的时候才有意义，否则便是毫无意义的。
        首先要说明的一点是：Java中的String对象就是一个unicode编码的字符串。
        但是，我们通常会听到有人说：“我们需要将String由ISO-8859-1转换为GBK编码”，这又是
怎么回事呢？实际上，我们并不是要“将 一个由ISO-8859-1编码的String转换为GBK编码的
String”，反复说明的是，JAVA中的String都是unicode编码的，所以不存在“ISO- 8859-1编码
的String”或“GBK编码的String”这样的说法。而需要转换的唯一的原因是String进行了错误的
编码。我们经常会碰到由ISO-8859- 1转换为诸如GBK/UTF-8等等这样的需求。所谓的转换过程
是：String --> byte[] -->String。
       也许 你非常清楚这个过程的代码：new String(text.getBytes("ISO-8859-1"),"GBK")。
但是，要真正理解起来并不是那么简单。表面上看似乎很容易理解， 不就是将text String对象
按照ISO-8859-1的方式编码为byte[]然后再把它按照GBK的方式转换为String吗？但是这句代码
很容易会被误解为： “将text String由ISO-8859-1转换为GBK编码”，这种说法是错误的。难道
你见过用这样的代码：new String(text.getBytes("GBK"),"UTF-8")来对String进行编码转
换的吗？
         之所以你会经常看到new String(text.getBytes("ISO-8859-1"),"GBK")这句代码，是因
为一个GBK的字节流被错误地以ISO-8859- 1的方式转换为String（unicode）了！发生这种情
况最普遍的地方是一个GBK编码的网页向后台提交数据的时候，就有可能会看到这句代码的出 现。
GBK的流被错误的当成ISO8859-1的流，所以便得到了一个错误的String。由于ISO8859-1是单
字节编码，所以每个字节被按照原样 转换为String，也就是说，虽然这是一个错误的转换，但
编码没有改变，所以我们仍然有机会把编码转换回来！所以那句经典的
new String(text.getBytes("ISO-8859-1"),"GBK")便出现了。
      如果系统误以为是其它编码格式，就有可能再也转换不回来了，因为编码转换并不是负负得
正那么简单的。 

6)Unicode与UTF-8/UTF-16之间有啥联系或区别？
http://zhidao.baidu.com/link?url=lDDXb034J2HEpjzmHSfE4ZdhOLdvGIJkB8bZDzS7FUhh8s6XUWmGljj24OJIdYg2UlfIE-ZT7M25sKB0VB9_T_
   UTF是 Unicode Translation Format，即把Unicode转做某种格式的意思。 在Unicode基本多
文种平面定义的字符（无论是拉丁字母、汉字或其他文字或符号），一律使用2字节储存。而在
辅助平面定义的字符，会以代理对（surrogate pair）的形式，以两个2字节的值来储存。
   unicode是一种编码方式，和ascii是同一个概念，而UTF是一种存储方式（格式）。
        在jvm内部，虚拟机管理数据（内存里）时，或者在进行对象序列化的时候，字符（串）都是
以unicode编码方式的。 但是在jvm中，字符（串）是以char 这种（存储）形式存放的，一个
char占2个字节（例如可以定义char c='字'），就是“字”和“Z”是同样占2个字节的；而在对象
序列化后，对象是进行UTF-8存储的，一个中文占2个字节，而英文、数字等只占一个字节，可以
参看链接：http://blog.csdn.net/snake_jixi/archive/2006/04/28/694516.aspx
        所以导致系列化以后的对象只占平时的大约一半的空间（当全是中文时占用相同的空间；全
是英文时unicode占用的空间是UTF-8的2倍）。
   UTF-16比起UTF-8，好处在于大部分字符都以固定长度的字节 (2字节) 储存，但UTF-16却无
 法兼容于ASCII编码。
        参考资料：http://blog.csdn.net/snake_jixi/archive/2006/04/28/694516.aspx

10.5 认识文本和文本文件 
 1) java的文本是char，是16位无符号整数, 是字符的unicode编码
 2) 文件是byte by byte 的数据序列
 3) 文本文件是文本char序列按照某种(utf-8,utf-16be,gbk)方案序列化为byte的存储结果。
  
10.6 字符流(Reader Writer) 
 1) 字符的处理, 一次处理一个字符(unicode)
 2) 字符的底层仍然是基本的字节流
 3) 字符流的基本实现: 
    InputStreamReader:完成byte流解析为char流, 按照编码解析
    OutputStreamWriter:提供char流到byte流, 按照编码处理
 4) 字符流的过滤器
  是字符读写的功能扩展, 极大的方便了文本的读写操作
   BufferedReader : readLine()
   PrintWriter: println()   
 5)读取一个文本文件:
	InputStream is = new FileInputStream("gbk.txt");
	Reader in = new InputStreamReader(is);
	BufferedReader reader = new BufferedReader(in);
  or
	BufferedReader in = 
	  new BufferedReader(new FileReader(filename));
  or	
    BufferedReader in = 
        new BufferedReader(
		   new InputStreamReader(
		     new FileInputStream(filename)));		
 6) 写出一个文本文件:
   PrintWriter out = 
	 new PrintWtirer(new FileWriter(filename));	
  or
     PrintWriter out = 
	    new PrintWtirer(
	 	  new OutputStreamWriter(
	 		new FileOutputStream(filename)));	

7) 系统的默认编码 中文一般是GBK
   String encoding=System.getProperty("file.encoding");

10.7 节点流: 流开始和结束的地方
  过滤器: 基本流的功能扩展
    
  字节流: 每次处理一个byte
  字符流: 每次包装出来一个char
  
  ObjectInputStream in = new ObjectInputStream(
  	 new CipherInputStream(
	  new FileInputStream(file)));
  Object obj = in.readObject();
  
  CipherInputStream in = new CipherInputStream(
	  new FileInputStream(file)); 
  img = ImageIO.read(in);
  
  装饰器模式: 流的API是按照装饰器模式设计的
 
 InputStream 最基本的输入流操作模型, 是抽象类(read()是没有实现的)
  |-- FileInputStream 实现了在文件上读取的方法 read(), 节点流
  |-- ByteArrayInputStream 实现了在数组里读取的方法 read()
  |-- FilterInputStream 过滤流,包装在一个基本流外部,提供功能扩展
  |    |-- DataInputStream 为基本流扩展了基本数据类型读取
  |    |    readInt() readDouble()...方法的底层是read()
  |    |-- BufferedInputStream 为基本流提供缓冲处理
  |    |-- CipherInputStream 解密输入流, 知道就行
  |    |-- ZipInputStream 解压输入流, 知道就行
  |-- ObjectInputStream 对象输入流, 也是过滤器
  
 OutputStream 最基本的输出流操作模型,是抽象类(write()是没有实现的)
  |-- FileOutputStream 实现了在文件上写出的方法 write(), 节点流
  |-- ByteArrayOutputStream 在变长数组上实现了write() 方法
  |-- FilterOutputStream 
  |    |-- DataOutputStream 基本类型输出
  |    |
  |    |-- BufferedOutputStream 缓冲输出
  |    |-- CipherOutputStream 加密输出
  |    |-- ZipOutputStream 压缩输出
  |-- ObjectOutputStream 对象输出流
 
 字符流, 每次处理一个字符

 Reader 抽象类, 定义了抽象方法read(), 每次读取一个字符
  |-- InputStreamReader 也是过滤器, 将byte序列解码为char序列
  |      底层也是依赖基本的byte输入流
  |-- BufferedReader (Scanner) 是字符流过滤器,
  |     有常用的文本读取方法readLine()
  |-- FileReader 底层是 FileInputSream + InputStreamReader
  |     不能指定读取文件的字符编码
  
 Writer 抽象类, 定义抽象方法write() 每次写出一个字符
  |-- OutputStreamWriter 也是过滤器, 将char序列编码为byte序列
  |      底层也是依赖基本的byte输出流
  |-- PrintWriter 是过滤器, 提供了常用方法println()
  |      非常常见的文本处理方法
  |-- FileWriter = OutputStreamWriter + FileOutputStream
  |      不能指定文本输出编码, 不好用!
   
   
   
 11. 匿名内部类  http://www.cnblogs.com/nerxious/archive/2013/01/25/2876489.html
         匿名内部类也就是没有名字的内部类。正因为没有名字，所以匿名内部类只能使用一次，它通常
   用来简化代码编写，但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口 

实例1:不使用匿名内部类来实现抽象方法
abstract class Person {
    public abstract void eat();
}
 
class Child extends Person {
    public void eat() {
        System.out.println("eat something");
    }
}
 
public class Demo {
    public static void main(String[] args) {
        Person p = new Child();
        p.eat();
    }
}
运行结果：eat something

可以看到，我们用Child继承了Person类，然后实现了Child的一个实例，将其向上转型为Person类的引用
但是，如果此处的Child类只使用一次，那么将其编写为独立的一个类岂不是很麻烦？
这个时候就引入了匿名内部类 

实例2：匿名内部类的基本实现
abstract class Person {
    public abstract void eat();
}
 
public class Demo {
    public static void main(String[] args) {
        Person p = new Person() {
            public void eat() {
                System.out.println("eat something");
            }
        };
        p.eat();
    }
}
运行结果：eat something

可以看到，我们直接将抽象类Person中的方法在大括号中实现了
这样便可以省略一个类的书写
并且，匿名内部类还能用于接口上
 
实例3：在接口上使用匿名内部类
interface Person {
    public void eat();
}
 
public class Demo {
    public static void main(String[] args) {
        Person p = new Person() {
            public void eat() {
                System.out.println("eat something");
            }
        };
        p.eat();
    }
}
运行结果：eat something 

由上面的例子可以看出，只要一个类是抽象的或是一个接口，那么其子类中的方法都可以使用匿名内部类来实现
最常用的情况就是在多线程的实现上，因为要实现多线程必须继承Thread类或是继承Runnable接口

实例4：Thread类的匿名内部类实现
public class Demo {
    public static void main(String[] args) {
        Thread t = new Thread() {
            public void run() {
                for (int i = 1; i <= 5; i++) {
                    System.out.print(i + " ");
                }
            }
        };
        t.start();
    }
}
运行结果：1 2 3 4 5 

实例5：Runnable接口的匿名内部类实现
public class Demo {
    public static void main(String[] args) {
        Runnable r = new Runnable() {
            public void run() {
                for (int i = 1; i <= 5; i++) {
                    System.out.print(i + " ");
                }
            }
        };
        Thread t = new Thread(r);
        t.start();
    }
}
运行结果：1 2 3 4 5

